class Solution:
    def minMalwareSpread(self, adjancency_matrix, initial):
        max_area = -1
        id = float('inf')
        sources = set()
        for index in initial:
            sources.add(index)
        initial_to_result = {}
        for i in initial:
            result = self.dfs(adjancency_matrix, i, i, initial_to_result, sources)
            if result.connected:
                if max_area == -1 and i < id:
                    id = i
            else:
                if result.area > max_area or result.area == max_area and i < id:
                    max_area = result.area
                    id = i
        return id

    def dfs(self, adjancency_matrix, inital_id, id, initial_to_result, sources):
        if id in initial_to_result:
            return Result(0, initial_to_result[id].connected)  # 震惊，看似DAG, 竟然是
        result = Result(1, id != inital_id and id in sources) # id也是病毒，但是不是起点，那么就是连通的
        initial_to_result[id] = result
        for i in range(len(adjancency_matrix)):
            if adjancency_matrix[id][i] == 1:
                neighbor_result = self.dfs(adjancency_matrix, inital_id, i, initial_to_result, sources)
                result.area += neighbor_result.area
                result.connected |= neighbor_result.connected
        return result

class Result:
    def __init__(self, area, connected):
        self.area = area
        self.connected = connected #是否跟其他病毒连通


s = Solution()
a = [[1,1,0],[1,1,0],[0,0,1]]
b = [0,1]
print(s.minMalwareSpread(a, b))









